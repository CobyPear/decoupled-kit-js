import { NextSeo } from 'next-seo';
import { isMultiLanguage } from '../../lib/isMultiLanguage.js';
import {
	getCurrentLocaleStore,
	globalDrupalStateStores,
} from '../../lib/stores';
import { getDrupalSearchResults } from '@pantheon-systems/drupal-kit';
import Layout from '../../components/layout';
import PageHeader from '../../components/page-header';
import { ArticleGrid } from '../../components/grid';

export default function SearchPage({
	hrefLang,
	footerMenu,
	errorMessage,
	searchResults,
	multiLanguage,
	locale,
}) {
	return (
		<Layout footerMenu={footerMenu}>
			<NextSeo
				title="Decoupled Next Drupal Demo"
				description="Generated by create-pantheon-decoupled-kit."
				languageAlternates={hrefLang || false}
			/>{' '}
			<PageHeader title="Search Results" />
			{errorMessage ? (
				<div className="mt-12 mx-auto max-w-[50vw]">
					<p className="text-xl text-center">
						⚠️Unable to fetch your search results⚠️
					</p>
				</div>
			) : (
				<section>
					<ArticleGrid
						data={searchResults}
						contentType="articles"
						multiLanguage={multiLanguage}
						locale={locale}
					/>
				</section>
			)}
		</Layout>
	);
}

export async function getServerSideProps(context) {
	const origin = process.env.NEXT_PUBLIC_FRONTEND_URL;
	const {
		locales,
		locale,
		res,
		query: { alias },
	} = context;

	// if there is more than one language in context.locales,
	// assume multilanguage is enabled.
	const multiLanguage = isMultiLanguage(locales);
	const hrefLang = locales.map((locale) => {
		return {
			hrefLang: locale,
			href: origin + '/' + locale,
		};
	});

	const store = getCurrentLocaleStore(locale, globalDrupalStateStores);

	let errorMessage;
	let searchResults;
	try {
		searchResults = alias
			? (
					await getDrupalSearchResults({
						apiUrl: process.env.BACKEND_URL,
						locale: locale,
						query: alias[0],
						response: res,
					})
			  ).data.map((value) => {
					// restructure response to match expected article object structure
					return value.attributes;
			  })
			: null;
	} catch (error) {
		console.error('Unable to fetch data for search results: ', error);
		errorMessage = true;
	}

	try {
		const footerMenu = await store.getObject({
			objectName: 'menu_items--main',
			refresh: true,
			res: context.res,
			anon: true,
		});

		return {
			props: {
				footerMenu,
				hrefLang,
				multiLanguage,
				locale: locale,
				errorMessage: errorMessage ? errorMessage : false,
				searchResults: searchResults ? searchResults : null,
			},
		};
	} catch (error) {
		console.error('Unable to fetch search page: ', error);
		return {
			notFound: true,
		};
	}
}
