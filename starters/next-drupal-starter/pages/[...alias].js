import { isMultiLanguage } from "../lib/isMultiLanguage";
import {
  getCurrentLocaleStore,
  globalDrupalStateStores,
  globalDrupalStateAuthStores,
} from "../lib/drupalStateContext";
import { getPreview } from "../lib/getPreview";
// TODO: should we export this from drupal-kit?
import { translatePath } from "@gdwc/drupal-state";
import { NextSeo } from "next-seo";

import Layout from "../components/layout";
import Recipe from "../components/recipe";
import Article from "../components/article";

export default function CatchAllRoute({ pageData, hrefLang, footerMenu }) {
  const RenderPage = () => {
    if (pageData.type === "node--page") {
      const {
        id,
        title,
        body: { value },
      } = pageData;
      return (
        <>
          {id ? (
            <article className="prose lg:prose-xl mt-10 mx-auto">
              <h1>{title}</h1>

              <div className="mt-12 max-w-lg mx-auto lg:grid-cols-3 lg:max-w-screen-lg">
                <div dangerouslySetInnerHTML={{ __html: value }} />
              </div>
            </article>
          ) : null}
        </>
      );
    }

    if (pageData.type === "node--article") {
      const {
        title,
        body: { processed },
        field_media_image,
      } = pageData;
      return (
        <Article
          title={title}
          body={processed}
          imgSrc={field_media_image?.field_media_image?.uri.url}
        />
      );
    }

    if (pageData.type === "node--recipe") {
      const {
        title,
        field_recipe_category,
        field_media_image,
        field_ingredients,
        field_recipe_instruction,
      } = pageData;

      const imgSrc = field_media_image?.field_media_image?.uri.url || "";
      return (
        <Recipe
          title={title}
          category={field_recipe_category[0].name}
          imgSrc={imgSrc}
          ingredients={field_ingredients}
          instructions={field_recipe_instruction.value}
        />
      );
    }
    return null;
  };
  return (
    <Layout footerMenu={footerMenu}>
      <NextSeo
        title="Decoupled Next Drupal Demo"
        description="Generated by create next app."
        languageAlternates={hrefLang}
      />
      <RenderPage />
    </Layout>
  );
}

export async function getServerSideProps(context) {
  try {
    const {
      locale,
      locales,
      params: { alias },
    } = context;
    const multiLanguage = isMultiLanguage(locales);
    const origin = process.env.NEXT_PUBLIC_FRONTEND_URL;
    const hrefLang = locales.map((locale) => {
      return {
        hrefLang: locale,
        href: origin + "/" + locale,
      };
    });
    const lang = context.preview ? context.previewData.previewLang : locale;

    const store = getCurrentLocaleStore(
      lang,
      context.preview ? globalDrupalStateAuthStores : globalDrupalStateStores
    );

    // get the path from the params
    const path = Array.isArray(alias) ? alias.join("/") : alias;
    // get the uuid and resource name from @gdwc/drupal-state/translatePath
    const {
      entity: { uuid },
      jsonapi: { resourceName },
    } = await translatePath(
      `${store.apiBase}/router/translate-path/`,
      path,
      {}
    );

    // determine params from the resourceName
    const params =
      resourceName === "node--recipe"
        ? "include=field_media_image.field_media_image,field_recipe_category"
        : resourceName === "node--article"
        ? "include=field_media_image.field_media_image"
        : "";
    const previewParams =
      context.preview && (await getPreview(context, resourceName, params));
    // fetch page data
    const pageData = await store.getObject({
      objectName: resourceName,
      id: uuid,
      params: context.preview ? previewParams : params,
      // if previewing a revision, force a fetch to Drupal
      refresh: context?.previewData?.resourceVersionId ? true : false,
    });

    const footerMenu = await store.getObject({
      objectName: "menu_items--main",
    });

    return { props: { pageData, hrefLang, footerMenu } };
  } catch (error) {
    console.error(`There was an error while fetching data: `, error);
    return {
      notFound: true,
    };
  }
}
