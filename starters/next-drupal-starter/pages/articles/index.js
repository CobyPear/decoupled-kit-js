import absoluteUrl from "next-absolute-url";
import { NextSeo } from "next-seo";
import { isMultiLanguage } from "../../lib/isMultiLanguage.js";
import {
  getCurrentLocaleStore,
  globalDrupalStateStores,
} from "../../lib/drupalStateContext";

import PageHeader from "../../components/page-header.js";
import GridList from "../../components/grid-list.js";
import Layout from "../../components/layout";

export default function SSRArticlesListTemplate({ articles, hrefLang, multiLanguage }) {
  return (
    <Layout>
      <NextSeo
        title="Decoupled Next Drupal Demo"
        description="Generated by create next app."
        languageAlternates={hrefLang || false}
      />
      <PageHeader title="Articles" />
      <section>
        <GridList
          contentArr={articles}
          contentType="articles"
          multiLanguage={multiLanguage}
        />
      </section>
    </Layout>
  );
}

export async function getStaticProps(context) {
  try {
    const { origin } = absoluteUrl(context.req);
    const { locales } = context;
    // if there is more than one language in context.locales,
    // assume multilanguage is enabled.
    const multiLanguage = isMultiLanguage(locales);
    const hrefLang = locales.map((locale) => {
      return {
        hrefLang: locale,
        href: origin + "/" + locale,
      };
    });

    const store = getCurrentLocaleStore(
      context.locale,
      globalDrupalStateStores
    );

    store.params.clear();
    store.params.addInclude(["field_media_image.field_media_image"]);

    const articles = await store.getObject({
      objectName: "node--article",
      res: context.res,
    });

    if (!articles) {
      throw new Error(
        "No articles returned. Make sure the objectName and store.params are valid!"
      );
    }

    // The calls below are unnecessary for rendering the page, but demonstrates
    // both that surrogate keys are de-duped when added to the response, and also
    // that they are bubbled up for GraphQL link queries.

    // A duplicate resource to ensure that keys are de-duped.
    await store.getObject({
      objectName: "node--article",
      id: articles[0].id,
      query: `{
        id
        title
      }`,
      res: context.res,
    });
    store.params.clear();

    // A new resource to ensure that keys are bubbled up.
    await store.getObject({
      objectName: "node--page",
      query: `{
        id
        title
      }`,
      res: context.res,
    });

    return {
      props: {
        articles,
        hrefLang,
        multiLanguage,
      },
    };
  } catch (error) {
    console.error("Unable to fetch articles: ", error);
    return {
      props: {},
    };
  }
}
